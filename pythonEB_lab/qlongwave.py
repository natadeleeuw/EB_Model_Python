# -*- coding: utf-8 -*-
"""Qlongwave.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DhI_qG8aK3JAiIMQE_S4EZKaxJkMLpsD
"""

#importing the packages we'll need
import pandas as pd
from numpy.ma.core import log
import numpy as np
import math

#importing the EB data from github
url = 'https://github.com/erikabirkeland/EB_Models_Final/blob/758d9443d7aff14df6aa5a1db57387078188b135/matlabEB_lab/CENMET_INPUT_data.csv?raw=true'
inMet = pd.read_csv(url,index_col=0)

#defining some necessary constants for the equation
Stratus = 0.24 #cloud cover factor for incoming LW
cloud_coeff = (1 + (0.7*0.24)) #cloud coefficient constant given in github EB model
StefBoltz = 5.67 * 1/100000000 #Wm^(-2)K^(-2)
EMIS = 0.99 #we are assuming the emissivity of snow to be 0.99 since snow is nearly a blackbody.

#creating empty arrays for our outputs to be added to the table
Qlw = np.empty(len(inMet.index)) #making an empty array for longwave outputs, our final output of the equation

LWin = np.empty(len(inMet.index)) #incoming LW

LWout = np.empty(len(inMet.index)) #outgoing LW

#calculating the longwave radiation

"""
This function will calculate the longwave radiation of a snowpack, assuming temperature is 0C with 50% stratus skies.

It will later be incoporporated into calculations of the snowpack's overall energy balance. 

Parameters:
  df = Dataframe; this is the InMet table, which we imported from github as a CSV file.
  T_C = air temperature, from the dataframe CSV file.
  StefBoltz = constant defined above.
  cloud_coeff = constant defined above.
  Stratus = constant defined above.
  EMIS = constant defined above. 
  ea = vapor pressure, this needs to come from Sam's equation.
  LWin = This equation uses the equation for incoming longwave radiation under clear skies, and multiplies it by the cloud
    coefficient for incoming longwave radiation under the assumed cloud cover conditions given in the github EB model.
  LWout = This equation calculates outgoing longwave radiation based on several constants as well as the incoming longwave 
    radiation for that specific day.
  
Returns: 
  Qlw = Net longwave radiation for that day (Incoming longwave - Outgoing longwave) in W/m2.

"""
def longwave(df):
  inMet = df #renaming the dataframe

  for i in range(len(inMet.index)):
    LWin[i] = (0.575*'ea'**(1/7)) * StefBoltz * ((inMet.iloc[i]['T_C'] + 273.2)**4) * cloud_coeff #LWin for clear skies, multiplied by the cloud coefficient

  inMet['LWin'] = LWin.tolist() #adding LWin to the table 
  
  for i in range(len(inMet.index)): 
    LWout = ((EMIS * StefBoltz) * (273.2)**4) + ((1 - EMIS)* LWin[i]) #LW out, W/m2

  inMet['LWout'] = LWout.tolist() #adding LWout to the table
   
  for i in range(len(inMet.index)): 
    Qlw = LWin - LWout #net LW radiation, in W/m2 per day

  inMet['Qlw'] = Qlw.tolist()

  return inMet #returning the data frame with added sections
